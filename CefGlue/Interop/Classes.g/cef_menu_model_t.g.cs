//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_menu_model_t
    {
        internal cef_base_ref_counted_t _base;
        internal IntPtr _is_sub_menu;
        internal IntPtr _clear;
        internal IntPtr _get_count;
        internal IntPtr _add_separator;
        internal IntPtr _add_item;
        internal IntPtr _add_check_item;
        internal IntPtr _add_radio_item;
        internal IntPtr _add_sub_menu;
        internal IntPtr _insert_separator_at;
        internal IntPtr _insert_item_at;
        internal IntPtr _insert_check_item_at;
        internal IntPtr _insert_radio_item_at;
        internal IntPtr _insert_sub_menu_at;
        internal IntPtr _remove;
        internal IntPtr _remove_at;
        internal IntPtr _get_index_of;
        internal IntPtr _get_command_id_at;
        internal IntPtr _set_command_id_at;
        internal IntPtr _get_label;
        internal IntPtr _get_label_at;
        internal IntPtr _set_label;
        internal IntPtr _set_label_at;
        internal IntPtr _get_type;
        internal IntPtr _get_type_at;
        internal IntPtr _get_group_id;
        internal IntPtr _get_group_id_at;
        internal IntPtr _set_group_id;
        internal IntPtr _set_group_id_at;
        internal IntPtr _get_sub_menu;
        internal IntPtr _get_sub_menu_at;
        internal IntPtr _is_visible;
        internal IntPtr _is_visible_at;
        internal IntPtr _set_visible;
        internal IntPtr _set_visible_at;
        internal IntPtr _is_enabled;
        internal IntPtr _is_enabled_at;
        internal IntPtr _set_enabled;
        internal IntPtr _set_enabled_at;
        internal IntPtr _is_checked;
        internal IntPtr _is_checked_at;
        internal IntPtr _set_checked;
        internal IntPtr _set_checked_at;
        internal IntPtr _has_accelerator;
        internal IntPtr _has_accelerator_at;
        internal IntPtr _set_accelerator;
        internal IntPtr _set_accelerator_at;
        internal IntPtr _remove_accelerator;
        internal IntPtr _remove_accelerator_at;
        internal IntPtr _get_accelerator;
        internal IntPtr _get_accelerator_at;
        internal IntPtr _set_color;
        internal IntPtr _set_color_at;
        internal IntPtr _get_color;
        internal IntPtr _get_color_at;
        internal IntPtr _set_font_list;
        internal IntPtr _set_font_list_at;
        
        // CreateMenuModel
        [DllImport(libcef.DllName, EntryPoint = "cef_menu_model_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_menu_model_t* create(cef_menu_model_delegate_t* @delegate);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void add_ref_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int release_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_one_ref_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_at_least_one_ref_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_sub_menu_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int clear_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate UIntPtr get_count_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int add_separator_delegate(cef_menu_model_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int add_item_delegate(cef_menu_model_t* self, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int add_check_item_delegate(cef_menu_model_t* self, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int add_radio_item_delegate(cef_menu_model_t* self, int command_id, cef_string_t* label, int group_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_menu_model_t* add_sub_menu_delegate(cef_menu_model_t* self, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int insert_separator_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int insert_item_at_delegate(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int insert_check_item_at_delegate(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int insert_radio_item_at_delegate(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label, int group_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_menu_model_t* insert_sub_menu_at_delegate(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int remove_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int remove_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_index_of_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_command_id_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_command_id_at_delegate(cef_menu_model_t* self, UIntPtr index, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_label_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_label_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_label_delegate(cef_menu_model_t* self, int command_id, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_label_at_delegate(cef_menu_model_t* self, UIntPtr index, cef_string_t* label);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate CefMenuItemType get_type_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate CefMenuItemType get_type_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_group_id_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_group_id_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_group_id_delegate(cef_menu_model_t* self, int command_id, int group_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_group_id_at_delegate(cef_menu_model_t* self, UIntPtr index, int group_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_menu_model_t* get_sub_menu_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_menu_model_t* get_sub_menu_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_visible_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_visible_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_visible_delegate(cef_menu_model_t* self, int command_id, int visible);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_visible_at_delegate(cef_menu_model_t* self, UIntPtr index, int visible);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_enabled_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_enabled_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_enabled_delegate(cef_menu_model_t* self, int command_id, int enabled);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_enabled_at_delegate(cef_menu_model_t* self, UIntPtr index, int enabled);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_checked_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_checked_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_checked_delegate(cef_menu_model_t* self, int command_id, int @checked);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_checked_at_delegate(cef_menu_model_t* self, UIntPtr index, int @checked);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_accelerator_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_accelerator_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_accelerator_delegate(cef_menu_model_t* self, int command_id, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_accelerator_at_delegate(cef_menu_model_t* self, UIntPtr index, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int remove_accelerator_delegate(cef_menu_model_t* self, int command_id);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int remove_accelerator_at_delegate(cef_menu_model_t* self, UIntPtr index);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_accelerator_delegate(cef_menu_model_t* self, int command_id, int* key_code, int* shift_pressed, int* ctrl_pressed, int* alt_pressed);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_accelerator_at_delegate(cef_menu_model_t* self, UIntPtr index, int* key_code, int* shift_pressed, int* ctrl_pressed, int* alt_pressed);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_color_delegate(cef_menu_model_t* self, int command_id, CefMenuColorType color_type, uint color);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_color_at_delegate(cef_menu_model_t* self, int index, CefMenuColorType color_type, uint color);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_color_delegate(cef_menu_model_t* self, int command_id, CefMenuColorType color_type, uint* color);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_color_at_delegate(cef_menu_model_t* self, int index, CefMenuColorType color_type, uint* color);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_font_list_delegate(cef_menu_model_t* self, int command_id, cef_string_t* font_list);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int set_font_list_at_delegate(cef_menu_model_t* self, int index, cef_string_t* font_list);
        
        // AddRef
        private static IntPtr _p0;
        private static add_ref_delegate _d0;
        
        public static void add_ref(cef_menu_model_t* self)
        {
            add_ref_delegate d;
            var p = self->_base._add_ref;
            if (p == _p0) { d = _d0; }
            else
            {
                d = (add_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_ref_delegate));
                if (_p0 == IntPtr.Zero) { _d0 = d; _p0 = p; }
            }
            d(self);
        }
        
        // Release
        private static IntPtr _p1;
        private static release_delegate _d1;
        
        public static int release(cef_menu_model_t* self)
        {
            release_delegate d;
            var p = self->_base._release;
            if (p == _p1) { d = _d1; }
            else
            {
                d = (release_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(release_delegate));
                if (_p1 == IntPtr.Zero) { _d1 = d; _p1 = p; }
            }
            return d(self);
        }
        
        // HasOneRef
        private static IntPtr _p2;
        private static has_one_ref_delegate _d2;
        
        public static int has_one_ref(cef_menu_model_t* self)
        {
            has_one_ref_delegate d;
            var p = self->_base._has_one_ref;
            if (p == _p2) { d = _d2; }
            else
            {
                d = (has_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_one_ref_delegate));
                if (_p2 == IntPtr.Zero) { _d2 = d; _p2 = p; }
            }
            return d(self);
        }
        
        // HasAtLeastOneRef
        private static IntPtr _p3;
        private static has_at_least_one_ref_delegate _d3;
        
        public static int has_at_least_one_ref(cef_menu_model_t* self)
        {
            has_at_least_one_ref_delegate d;
            var p = self->_base._has_at_least_one_ref;
            if (p == _p3) { d = _d3; }
            else
            {
                d = (has_at_least_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_at_least_one_ref_delegate));
                if (_p3 == IntPtr.Zero) { _d3 = d; _p3 = p; }
            }
            return d(self);
        }
        
        // IsSubMenu
        private static IntPtr _p4;
        private static is_sub_menu_delegate _d4;
        
        public static int is_sub_menu(cef_menu_model_t* self)
        {
            is_sub_menu_delegate d;
            var p = self->_is_sub_menu;
            if (p == _p4) { d = _d4; }
            else
            {
                d = (is_sub_menu_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_sub_menu_delegate));
                if (_p4 == IntPtr.Zero) { _d4 = d; _p4 = p; }
            }
            return d(self);
        }
        
        // Clear
        private static IntPtr _p5;
        private static clear_delegate _d5;
        
        public static int clear(cef_menu_model_t* self)
        {
            clear_delegate d;
            var p = self->_clear;
            if (p == _p5) { d = _d5; }
            else
            {
                d = (clear_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(clear_delegate));
                if (_p5 == IntPtr.Zero) { _d5 = d; _p5 = p; }
            }
            return d(self);
        }
        
        // GetCount
        private static IntPtr _p6;
        private static get_count_delegate _d6;
        
        public static UIntPtr get_count(cef_menu_model_t* self)
        {
            get_count_delegate d;
            var p = self->_get_count;
            if (p == _p6) { d = _d6; }
            else
            {
                d = (get_count_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_count_delegate));
                if (_p6 == IntPtr.Zero) { _d6 = d; _p6 = p; }
            }
            return d(self);
        }
        
        // AddSeparator
        private static IntPtr _p7;
        private static add_separator_delegate _d7;
        
        public static int add_separator(cef_menu_model_t* self)
        {
            add_separator_delegate d;
            var p = self->_add_separator;
            if (p == _p7) { d = _d7; }
            else
            {
                d = (add_separator_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_separator_delegate));
                if (_p7 == IntPtr.Zero) { _d7 = d; _p7 = p; }
            }
            return d(self);
        }
        
        // AddItem
        private static IntPtr _p8;
        private static add_item_delegate _d8;
        
        public static int add_item(cef_menu_model_t* self, int command_id, cef_string_t* label)
        {
            add_item_delegate d;
            var p = self->_add_item;
            if (p == _p8) { d = _d8; }
            else
            {
                d = (add_item_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_item_delegate));
                if (_p8 == IntPtr.Zero) { _d8 = d; _p8 = p; }
            }
            return d(self, command_id, label);
        }
        
        // AddCheckItem
        private static IntPtr _p9;
        private static add_check_item_delegate _d9;
        
        public static int add_check_item(cef_menu_model_t* self, int command_id, cef_string_t* label)
        {
            add_check_item_delegate d;
            var p = self->_add_check_item;
            if (p == _p9) { d = _d9; }
            else
            {
                d = (add_check_item_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_check_item_delegate));
                if (_p9 == IntPtr.Zero) { _d9 = d; _p9 = p; }
            }
            return d(self, command_id, label);
        }
        
        // AddRadioItem
        private static IntPtr _pa;
        private static add_radio_item_delegate _da;
        
        public static int add_radio_item(cef_menu_model_t* self, int command_id, cef_string_t* label, int group_id)
        {
            add_radio_item_delegate d;
            var p = self->_add_radio_item;
            if (p == _pa) { d = _da; }
            else
            {
                d = (add_radio_item_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_radio_item_delegate));
                if (_pa == IntPtr.Zero) { _da = d; _pa = p; }
            }
            return d(self, command_id, label, group_id);
        }
        
        // AddSubMenu
        private static IntPtr _pb;
        private static add_sub_menu_delegate _db;
        
        public static cef_menu_model_t* add_sub_menu(cef_menu_model_t* self, int command_id, cef_string_t* label)
        {
            add_sub_menu_delegate d;
            var p = self->_add_sub_menu;
            if (p == _pb) { d = _db; }
            else
            {
                d = (add_sub_menu_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_sub_menu_delegate));
                if (_pb == IntPtr.Zero) { _db = d; _pb = p; }
            }
            return d(self, command_id, label);
        }
        
        // InsertSeparatorAt
        private static IntPtr _pc;
        private static insert_separator_at_delegate _dc;
        
        public static int insert_separator_at(cef_menu_model_t* self, UIntPtr index)
        {
            insert_separator_at_delegate d;
            var p = self->_insert_separator_at;
            if (p == _pc) { d = _dc; }
            else
            {
                d = (insert_separator_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(insert_separator_at_delegate));
                if (_pc == IntPtr.Zero) { _dc = d; _pc = p; }
            }
            return d(self, index);
        }
        
        // InsertItemAt
        private static IntPtr _pd;
        private static insert_item_at_delegate _dd;
        
        public static int insert_item_at(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label)
        {
            insert_item_at_delegate d;
            var p = self->_insert_item_at;
            if (p == _pd) { d = _dd; }
            else
            {
                d = (insert_item_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(insert_item_at_delegate));
                if (_pd == IntPtr.Zero) { _dd = d; _pd = p; }
            }
            return d(self, index, command_id, label);
        }
        
        // InsertCheckItemAt
        private static IntPtr _pe;
        private static insert_check_item_at_delegate _de;
        
        public static int insert_check_item_at(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label)
        {
            insert_check_item_at_delegate d;
            var p = self->_insert_check_item_at;
            if (p == _pe) { d = _de; }
            else
            {
                d = (insert_check_item_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(insert_check_item_at_delegate));
                if (_pe == IntPtr.Zero) { _de = d; _pe = p; }
            }
            return d(self, index, command_id, label);
        }
        
        // InsertRadioItemAt
        private static IntPtr _pf;
        private static insert_radio_item_at_delegate _df;
        
        public static int insert_radio_item_at(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label, int group_id)
        {
            insert_radio_item_at_delegate d;
            var p = self->_insert_radio_item_at;
            if (p == _pf) { d = _df; }
            else
            {
                d = (insert_radio_item_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(insert_radio_item_at_delegate));
                if (_pf == IntPtr.Zero) { _df = d; _pf = p; }
            }
            return d(self, index, command_id, label, group_id);
        }
        
        // InsertSubMenuAt
        private static IntPtr _p10;
        private static insert_sub_menu_at_delegate _d10;
        
        public static cef_menu_model_t* insert_sub_menu_at(cef_menu_model_t* self, UIntPtr index, int command_id, cef_string_t* label)
        {
            insert_sub_menu_at_delegate d;
            var p = self->_insert_sub_menu_at;
            if (p == _p10) { d = _d10; }
            else
            {
                d = (insert_sub_menu_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(insert_sub_menu_at_delegate));
                if (_p10 == IntPtr.Zero) { _d10 = d; _p10 = p; }
            }
            return d(self, index, command_id, label);
        }
        
        // Remove
        private static IntPtr _p11;
        private static remove_delegate _d11;
        
        public static int remove(cef_menu_model_t* self, int command_id)
        {
            remove_delegate d;
            var p = self->_remove;
            if (p == _p11) { d = _d11; }
            else
            {
                d = (remove_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(remove_delegate));
                if (_p11 == IntPtr.Zero) { _d11 = d; _p11 = p; }
            }
            return d(self, command_id);
        }
        
        // RemoveAt
        private static IntPtr _p12;
        private static remove_at_delegate _d12;
        
        public static int remove_at(cef_menu_model_t* self, UIntPtr index)
        {
            remove_at_delegate d;
            var p = self->_remove_at;
            if (p == _p12) { d = _d12; }
            else
            {
                d = (remove_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(remove_at_delegate));
                if (_p12 == IntPtr.Zero) { _d12 = d; _p12 = p; }
            }
            return d(self, index);
        }
        
        // GetIndexOf
        private static IntPtr _p13;
        private static get_index_of_delegate _d13;
        
        public static int get_index_of(cef_menu_model_t* self, int command_id)
        {
            get_index_of_delegate d;
            var p = self->_get_index_of;
            if (p == _p13) { d = _d13; }
            else
            {
                d = (get_index_of_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_index_of_delegate));
                if (_p13 == IntPtr.Zero) { _d13 = d; _p13 = p; }
            }
            return d(self, command_id);
        }
        
        // GetCommandIdAt
        private static IntPtr _p14;
        private static get_command_id_at_delegate _d14;
        
        public static int get_command_id_at(cef_menu_model_t* self, UIntPtr index)
        {
            get_command_id_at_delegate d;
            var p = self->_get_command_id_at;
            if (p == _p14) { d = _d14; }
            else
            {
                d = (get_command_id_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_command_id_at_delegate));
                if (_p14 == IntPtr.Zero) { _d14 = d; _p14 = p; }
            }
            return d(self, index);
        }
        
        // SetCommandIdAt
        private static IntPtr _p15;
        private static set_command_id_at_delegate _d15;
        
        public static int set_command_id_at(cef_menu_model_t* self, UIntPtr index, int command_id)
        {
            set_command_id_at_delegate d;
            var p = self->_set_command_id_at;
            if (p == _p15) { d = _d15; }
            else
            {
                d = (set_command_id_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_command_id_at_delegate));
                if (_p15 == IntPtr.Zero) { _d15 = d; _p15 = p; }
            }
            return d(self, index, command_id);
        }
        
        // GetLabel
        private static IntPtr _p16;
        private static get_label_delegate _d16;
        
        public static cef_string_userfree* get_label(cef_menu_model_t* self, int command_id)
        {
            get_label_delegate d;
            var p = self->_get_label;
            if (p == _p16) { d = _d16; }
            else
            {
                d = (get_label_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_label_delegate));
                if (_p16 == IntPtr.Zero) { _d16 = d; _p16 = p; }
            }
            return d(self, command_id);
        }
        
        // GetLabelAt
        private static IntPtr _p17;
        private static get_label_at_delegate _d17;
        
        public static cef_string_userfree* get_label_at(cef_menu_model_t* self, UIntPtr index)
        {
            get_label_at_delegate d;
            var p = self->_get_label_at;
            if (p == _p17) { d = _d17; }
            else
            {
                d = (get_label_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_label_at_delegate));
                if (_p17 == IntPtr.Zero) { _d17 = d; _p17 = p; }
            }
            return d(self, index);
        }
        
        // SetLabel
        private static IntPtr _p18;
        private static set_label_delegate _d18;
        
        public static int set_label(cef_menu_model_t* self, int command_id, cef_string_t* label)
        {
            set_label_delegate d;
            var p = self->_set_label;
            if (p == _p18) { d = _d18; }
            else
            {
                d = (set_label_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_label_delegate));
                if (_p18 == IntPtr.Zero) { _d18 = d; _p18 = p; }
            }
            return d(self, command_id, label);
        }
        
        // SetLabelAt
        private static IntPtr _p19;
        private static set_label_at_delegate _d19;
        
        public static int set_label_at(cef_menu_model_t* self, UIntPtr index, cef_string_t* label)
        {
            set_label_at_delegate d;
            var p = self->_set_label_at;
            if (p == _p19) { d = _d19; }
            else
            {
                d = (set_label_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_label_at_delegate));
                if (_p19 == IntPtr.Zero) { _d19 = d; _p19 = p; }
            }
            return d(self, index, label);
        }
        
        // GetType
        private static IntPtr _p1a;
        private static get_type_delegate _d1a;
        
        public static CefMenuItemType get_type(cef_menu_model_t* self, int command_id)
        {
            get_type_delegate d;
            var p = self->_get_type;
            if (p == _p1a) { d = _d1a; }
            else
            {
                d = (get_type_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_type_delegate));
                if (_p1a == IntPtr.Zero) { _d1a = d; _p1a = p; }
            }
            return d(self, command_id);
        }
        
        // GetTypeAt
        private static IntPtr _p1b;
        private static get_type_at_delegate _d1b;
        
        public static CefMenuItemType get_type_at(cef_menu_model_t* self, UIntPtr index)
        {
            get_type_at_delegate d;
            var p = self->_get_type_at;
            if (p == _p1b) { d = _d1b; }
            else
            {
                d = (get_type_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_type_at_delegate));
                if (_p1b == IntPtr.Zero) { _d1b = d; _p1b = p; }
            }
            return d(self, index);
        }
        
        // GetGroupId
        private static IntPtr _p1c;
        private static get_group_id_delegate _d1c;
        
        public static int get_group_id(cef_menu_model_t* self, int command_id)
        {
            get_group_id_delegate d;
            var p = self->_get_group_id;
            if (p == _p1c) { d = _d1c; }
            else
            {
                d = (get_group_id_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_group_id_delegate));
                if (_p1c == IntPtr.Zero) { _d1c = d; _p1c = p; }
            }
            return d(self, command_id);
        }
        
        // GetGroupIdAt
        private static IntPtr _p1d;
        private static get_group_id_at_delegate _d1d;
        
        public static int get_group_id_at(cef_menu_model_t* self, UIntPtr index)
        {
            get_group_id_at_delegate d;
            var p = self->_get_group_id_at;
            if (p == _p1d) { d = _d1d; }
            else
            {
                d = (get_group_id_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_group_id_at_delegate));
                if (_p1d == IntPtr.Zero) { _d1d = d; _p1d = p; }
            }
            return d(self, index);
        }
        
        // SetGroupId
        private static IntPtr _p1e;
        private static set_group_id_delegate _d1e;
        
        public static int set_group_id(cef_menu_model_t* self, int command_id, int group_id)
        {
            set_group_id_delegate d;
            var p = self->_set_group_id;
            if (p == _p1e) { d = _d1e; }
            else
            {
                d = (set_group_id_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_group_id_delegate));
                if (_p1e == IntPtr.Zero) { _d1e = d; _p1e = p; }
            }
            return d(self, command_id, group_id);
        }
        
        // SetGroupIdAt
        private static IntPtr _p1f;
        private static set_group_id_at_delegate _d1f;
        
        public static int set_group_id_at(cef_menu_model_t* self, UIntPtr index, int group_id)
        {
            set_group_id_at_delegate d;
            var p = self->_set_group_id_at;
            if (p == _p1f) { d = _d1f; }
            else
            {
                d = (set_group_id_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_group_id_at_delegate));
                if (_p1f == IntPtr.Zero) { _d1f = d; _p1f = p; }
            }
            return d(self, index, group_id);
        }
        
        // GetSubMenu
        private static IntPtr _p20;
        private static get_sub_menu_delegate _d20;
        
        public static cef_menu_model_t* get_sub_menu(cef_menu_model_t* self, int command_id)
        {
            get_sub_menu_delegate d;
            var p = self->_get_sub_menu;
            if (p == _p20) { d = _d20; }
            else
            {
                d = (get_sub_menu_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_sub_menu_delegate));
                if (_p20 == IntPtr.Zero) { _d20 = d; _p20 = p; }
            }
            return d(self, command_id);
        }
        
        // GetSubMenuAt
        private static IntPtr _p21;
        private static get_sub_menu_at_delegate _d21;
        
        public static cef_menu_model_t* get_sub_menu_at(cef_menu_model_t* self, UIntPtr index)
        {
            get_sub_menu_at_delegate d;
            var p = self->_get_sub_menu_at;
            if (p == _p21) { d = _d21; }
            else
            {
                d = (get_sub_menu_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_sub_menu_at_delegate));
                if (_p21 == IntPtr.Zero) { _d21 = d; _p21 = p; }
            }
            return d(self, index);
        }
        
        // IsVisible
        private static IntPtr _p22;
        private static is_visible_delegate _d22;
        
        public static int is_visible(cef_menu_model_t* self, int command_id)
        {
            is_visible_delegate d;
            var p = self->_is_visible;
            if (p == _p22) { d = _d22; }
            else
            {
                d = (is_visible_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_visible_delegate));
                if (_p22 == IntPtr.Zero) { _d22 = d; _p22 = p; }
            }
            return d(self, command_id);
        }
        
        // IsVisibleAt
        private static IntPtr _p23;
        private static is_visible_at_delegate _d23;
        
        public static int is_visible_at(cef_menu_model_t* self, UIntPtr index)
        {
            is_visible_at_delegate d;
            var p = self->_is_visible_at;
            if (p == _p23) { d = _d23; }
            else
            {
                d = (is_visible_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_visible_at_delegate));
                if (_p23 == IntPtr.Zero) { _d23 = d; _p23 = p; }
            }
            return d(self, index);
        }
        
        // SetVisible
        private static IntPtr _p24;
        private static set_visible_delegate _d24;
        
        public static int set_visible(cef_menu_model_t* self, int command_id, int visible)
        {
            set_visible_delegate d;
            var p = self->_set_visible;
            if (p == _p24) { d = _d24; }
            else
            {
                d = (set_visible_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_visible_delegate));
                if (_p24 == IntPtr.Zero) { _d24 = d; _p24 = p; }
            }
            return d(self, command_id, visible);
        }
        
        // SetVisibleAt
        private static IntPtr _p25;
        private static set_visible_at_delegate _d25;
        
        public static int set_visible_at(cef_menu_model_t* self, UIntPtr index, int visible)
        {
            set_visible_at_delegate d;
            var p = self->_set_visible_at;
            if (p == _p25) { d = _d25; }
            else
            {
                d = (set_visible_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_visible_at_delegate));
                if (_p25 == IntPtr.Zero) { _d25 = d; _p25 = p; }
            }
            return d(self, index, visible);
        }
        
        // IsEnabled
        private static IntPtr _p26;
        private static is_enabled_delegate _d26;
        
        public static int is_enabled(cef_menu_model_t* self, int command_id)
        {
            is_enabled_delegate d;
            var p = self->_is_enabled;
            if (p == _p26) { d = _d26; }
            else
            {
                d = (is_enabled_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_enabled_delegate));
                if (_p26 == IntPtr.Zero) { _d26 = d; _p26 = p; }
            }
            return d(self, command_id);
        }
        
        // IsEnabledAt
        private static IntPtr _p27;
        private static is_enabled_at_delegate _d27;
        
        public static int is_enabled_at(cef_menu_model_t* self, UIntPtr index)
        {
            is_enabled_at_delegate d;
            var p = self->_is_enabled_at;
            if (p == _p27) { d = _d27; }
            else
            {
                d = (is_enabled_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_enabled_at_delegate));
                if (_p27 == IntPtr.Zero) { _d27 = d; _p27 = p; }
            }
            return d(self, index);
        }
        
        // SetEnabled
        private static IntPtr _p28;
        private static set_enabled_delegate _d28;
        
        public static int set_enabled(cef_menu_model_t* self, int command_id, int enabled)
        {
            set_enabled_delegate d;
            var p = self->_set_enabled;
            if (p == _p28) { d = _d28; }
            else
            {
                d = (set_enabled_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_enabled_delegate));
                if (_p28 == IntPtr.Zero) { _d28 = d; _p28 = p; }
            }
            return d(self, command_id, enabled);
        }
        
        // SetEnabledAt
        private static IntPtr _p29;
        private static set_enabled_at_delegate _d29;
        
        public static int set_enabled_at(cef_menu_model_t* self, UIntPtr index, int enabled)
        {
            set_enabled_at_delegate d;
            var p = self->_set_enabled_at;
            if (p == _p29) { d = _d29; }
            else
            {
                d = (set_enabled_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_enabled_at_delegate));
                if (_p29 == IntPtr.Zero) { _d29 = d; _p29 = p; }
            }
            return d(self, index, enabled);
        }
        
        // IsChecked
        private static IntPtr _p2a;
        private static is_checked_delegate _d2a;
        
        public static int is_checked(cef_menu_model_t* self, int command_id)
        {
            is_checked_delegate d;
            var p = self->_is_checked;
            if (p == _p2a) { d = _d2a; }
            else
            {
                d = (is_checked_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_checked_delegate));
                if (_p2a == IntPtr.Zero) { _d2a = d; _p2a = p; }
            }
            return d(self, command_id);
        }
        
        // IsCheckedAt
        private static IntPtr _p2b;
        private static is_checked_at_delegate _d2b;
        
        public static int is_checked_at(cef_menu_model_t* self, UIntPtr index)
        {
            is_checked_at_delegate d;
            var p = self->_is_checked_at;
            if (p == _p2b) { d = _d2b; }
            else
            {
                d = (is_checked_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_checked_at_delegate));
                if (_p2b == IntPtr.Zero) { _d2b = d; _p2b = p; }
            }
            return d(self, index);
        }
        
        // SetChecked
        private static IntPtr _p2c;
        private static set_checked_delegate _d2c;
        
        public static int set_checked(cef_menu_model_t* self, int command_id, int @checked)
        {
            set_checked_delegate d;
            var p = self->_set_checked;
            if (p == _p2c) { d = _d2c; }
            else
            {
                d = (set_checked_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_checked_delegate));
                if (_p2c == IntPtr.Zero) { _d2c = d; _p2c = p; }
            }
            return d(self, command_id, @checked);
        }
        
        // SetCheckedAt
        private static IntPtr _p2d;
        private static set_checked_at_delegate _d2d;
        
        public static int set_checked_at(cef_menu_model_t* self, UIntPtr index, int @checked)
        {
            set_checked_at_delegate d;
            var p = self->_set_checked_at;
            if (p == _p2d) { d = _d2d; }
            else
            {
                d = (set_checked_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_checked_at_delegate));
                if (_p2d == IntPtr.Zero) { _d2d = d; _p2d = p; }
            }
            return d(self, index, @checked);
        }
        
        // HasAccelerator
        private static IntPtr _p2e;
        private static has_accelerator_delegate _d2e;
        
        public static int has_accelerator(cef_menu_model_t* self, int command_id)
        {
            has_accelerator_delegate d;
            var p = self->_has_accelerator;
            if (p == _p2e) { d = _d2e; }
            else
            {
                d = (has_accelerator_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_accelerator_delegate));
                if (_p2e == IntPtr.Zero) { _d2e = d; _p2e = p; }
            }
            return d(self, command_id);
        }
        
        // HasAcceleratorAt
        private static IntPtr _p2f;
        private static has_accelerator_at_delegate _d2f;
        
        public static int has_accelerator_at(cef_menu_model_t* self, UIntPtr index)
        {
            has_accelerator_at_delegate d;
            var p = self->_has_accelerator_at;
            if (p == _p2f) { d = _d2f; }
            else
            {
                d = (has_accelerator_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_accelerator_at_delegate));
                if (_p2f == IntPtr.Zero) { _d2f = d; _p2f = p; }
            }
            return d(self, index);
        }
        
        // SetAccelerator
        private static IntPtr _p30;
        private static set_accelerator_delegate _d30;
        
        public static int set_accelerator(cef_menu_model_t* self, int command_id, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed)
        {
            set_accelerator_delegate d;
            var p = self->_set_accelerator;
            if (p == _p30) { d = _d30; }
            else
            {
                d = (set_accelerator_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_accelerator_delegate));
                if (_p30 == IntPtr.Zero) { _d30 = d; _p30 = p; }
            }
            return d(self, command_id, key_code, shift_pressed, ctrl_pressed, alt_pressed);
        }
        
        // SetAcceleratorAt
        private static IntPtr _p31;
        private static set_accelerator_at_delegate _d31;
        
        public static int set_accelerator_at(cef_menu_model_t* self, UIntPtr index, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed)
        {
            set_accelerator_at_delegate d;
            var p = self->_set_accelerator_at;
            if (p == _p31) { d = _d31; }
            else
            {
                d = (set_accelerator_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_accelerator_at_delegate));
                if (_p31 == IntPtr.Zero) { _d31 = d; _p31 = p; }
            }
            return d(self, index, key_code, shift_pressed, ctrl_pressed, alt_pressed);
        }
        
        // RemoveAccelerator
        private static IntPtr _p32;
        private static remove_accelerator_delegate _d32;
        
        public static int remove_accelerator(cef_menu_model_t* self, int command_id)
        {
            remove_accelerator_delegate d;
            var p = self->_remove_accelerator;
            if (p == _p32) { d = _d32; }
            else
            {
                d = (remove_accelerator_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(remove_accelerator_delegate));
                if (_p32 == IntPtr.Zero) { _d32 = d; _p32 = p; }
            }
            return d(self, command_id);
        }
        
        // RemoveAcceleratorAt
        private static IntPtr _p33;
        private static remove_accelerator_at_delegate _d33;
        
        public static int remove_accelerator_at(cef_menu_model_t* self, UIntPtr index)
        {
            remove_accelerator_at_delegate d;
            var p = self->_remove_accelerator_at;
            if (p == _p33) { d = _d33; }
            else
            {
                d = (remove_accelerator_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(remove_accelerator_at_delegate));
                if (_p33 == IntPtr.Zero) { _d33 = d; _p33 = p; }
            }
            return d(self, index);
        }
        
        // GetAccelerator
        private static IntPtr _p34;
        private static get_accelerator_delegate _d34;
        
        public static int get_accelerator(cef_menu_model_t* self, int command_id, int* key_code, int* shift_pressed, int* ctrl_pressed, int* alt_pressed)
        {
            get_accelerator_delegate d;
            var p = self->_get_accelerator;
            if (p == _p34) { d = _d34; }
            else
            {
                d = (get_accelerator_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_accelerator_delegate));
                if (_p34 == IntPtr.Zero) { _d34 = d; _p34 = p; }
            }
            return d(self, command_id, key_code, shift_pressed, ctrl_pressed, alt_pressed);
        }
        
        // GetAcceleratorAt
        private static IntPtr _p35;
        private static get_accelerator_at_delegate _d35;
        
        public static int get_accelerator_at(cef_menu_model_t* self, UIntPtr index, int* key_code, int* shift_pressed, int* ctrl_pressed, int* alt_pressed)
        {
            get_accelerator_at_delegate d;
            var p = self->_get_accelerator_at;
            if (p == _p35) { d = _d35; }
            else
            {
                d = (get_accelerator_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_accelerator_at_delegate));
                if (_p35 == IntPtr.Zero) { _d35 = d; _p35 = p; }
            }
            return d(self, index, key_code, shift_pressed, ctrl_pressed, alt_pressed);
        }
        
        // SetColor
        private static IntPtr _p36;
        private static set_color_delegate _d36;
        
        public static int set_color(cef_menu_model_t* self, int command_id, CefMenuColorType color_type, uint color)
        {
            set_color_delegate d;
            var p = self->_set_color;
            if (p == _p36) { d = _d36; }
            else
            {
                d = (set_color_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_color_delegate));
                if (_p36 == IntPtr.Zero) { _d36 = d; _p36 = p; }
            }
            return d(self, command_id, color_type, color);
        }
        
        // SetColorAt
        private static IntPtr _p37;
        private static set_color_at_delegate _d37;
        
        public static int set_color_at(cef_menu_model_t* self, int index, CefMenuColorType color_type, uint color)
        {
            set_color_at_delegate d;
            var p = self->_set_color_at;
            if (p == _p37) { d = _d37; }
            else
            {
                d = (set_color_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_color_at_delegate));
                if (_p37 == IntPtr.Zero) { _d37 = d; _p37 = p; }
            }
            return d(self, index, color_type, color);
        }
        
        // GetColor
        private static IntPtr _p38;
        private static get_color_delegate _d38;
        
        public static int get_color(cef_menu_model_t* self, int command_id, CefMenuColorType color_type, uint* color)
        {
            get_color_delegate d;
            var p = self->_get_color;
            if (p == _p38) { d = _d38; }
            else
            {
                d = (get_color_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_color_delegate));
                if (_p38 == IntPtr.Zero) { _d38 = d; _p38 = p; }
            }
            return d(self, command_id, color_type, color);
        }
        
        // GetColorAt
        private static IntPtr _p39;
        private static get_color_at_delegate _d39;
        
        public static int get_color_at(cef_menu_model_t* self, int index, CefMenuColorType color_type, uint* color)
        {
            get_color_at_delegate d;
            var p = self->_get_color_at;
            if (p == _p39) { d = _d39; }
            else
            {
                d = (get_color_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_color_at_delegate));
                if (_p39 == IntPtr.Zero) { _d39 = d; _p39 = p; }
            }
            return d(self, index, color_type, color);
        }
        
        // SetFontList
        private static IntPtr _p3a;
        private static set_font_list_delegate _d3a;
        
        public static int set_font_list(cef_menu_model_t* self, int command_id, cef_string_t* font_list)
        {
            set_font_list_delegate d;
            var p = self->_set_font_list;
            if (p == _p3a) { d = _d3a; }
            else
            {
                d = (set_font_list_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_font_list_delegate));
                if (_p3a == IntPtr.Zero) { _d3a = d; _p3a = p; }
            }
            return d(self, command_id, font_list);
        }
        
        // SetFontListAt
        private static IntPtr _p3b;
        private static set_font_list_at_delegate _d3b;
        
        public static int set_font_list_at(cef_menu_model_t* self, int index, cef_string_t* font_list)
        {
            set_font_list_at_delegate d;
            var p = self->_set_font_list_at;
            if (p == _p3b) { d = _d3b; }
            else
            {
                d = (set_font_list_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_font_list_at_delegate));
                if (_p3b == IntPtr.Zero) { _d3b = d; _p3b = p; }
            }
            return d(self, index, font_list);
        }
        
    }
}

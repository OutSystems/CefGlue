//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_x509certificate_t
    {
        internal cef_base_ref_counted_t _base;
        internal IntPtr _get_subject;
        internal IntPtr _get_issuer;
        internal IntPtr _get_serial_number;
        internal IntPtr _get_valid_start;
        internal IntPtr _get_valid_expiry;
        internal IntPtr _get_derencoded;
        internal IntPtr _get_pemencoded;
        internal IntPtr _get_issuer_chain_size;
        internal IntPtr _get_derencoded_issuer_chain;
        internal IntPtr _get_pemencoded_issuer_chain;
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void add_ref_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int release_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_one_ref_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_at_least_one_ref_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_x509cert_principal_t* get_subject_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_x509cert_principal_t* get_issuer_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_binary_value_t* get_serial_number_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate CefBaseTime get_valid_start_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate CefBaseTime get_valid_expiry_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_binary_value_t* get_derencoded_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_binary_value_t* get_pemencoded_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate UIntPtr get_issuer_chain_size_delegate(cef_x509certificate_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void get_derencoded_issuer_chain_delegate(cef_x509certificate_t* self, UIntPtr* chainCount, cef_binary_value_t** chain);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void get_pemencoded_issuer_chain_delegate(cef_x509certificate_t* self, UIntPtr* chainCount, cef_binary_value_t** chain);
        
        // AddRef
        private static IntPtr _p0;
        private static add_ref_delegate _d0;
        
        public static void add_ref(cef_x509certificate_t* self)
        {
            add_ref_delegate d;
            var p = self->_base._add_ref;
            if (p == _p0) { d = _d0; }
            else
            {
                d = (add_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_ref_delegate));
                if (_p0 == IntPtr.Zero) { _d0 = d; _p0 = p; }
            }
            d(self);
        }
        
        // Release
        private static IntPtr _p1;
        private static release_delegate _d1;
        
        public static int release(cef_x509certificate_t* self)
        {
            release_delegate d;
            var p = self->_base._release;
            if (p == _p1) { d = _d1; }
            else
            {
                d = (release_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(release_delegate));
                if (_p1 == IntPtr.Zero) { _d1 = d; _p1 = p; }
            }
            return d(self);
        }
        
        // HasOneRef
        private static IntPtr _p2;
        private static has_one_ref_delegate _d2;
        
        public static int has_one_ref(cef_x509certificate_t* self)
        {
            has_one_ref_delegate d;
            var p = self->_base._has_one_ref;
            if (p == _p2) { d = _d2; }
            else
            {
                d = (has_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_one_ref_delegate));
                if (_p2 == IntPtr.Zero) { _d2 = d; _p2 = p; }
            }
            return d(self);
        }
        
        // HasAtLeastOneRef
        private static IntPtr _p3;
        private static has_at_least_one_ref_delegate _d3;
        
        public static int has_at_least_one_ref(cef_x509certificate_t* self)
        {
            has_at_least_one_ref_delegate d;
            var p = self->_base._has_at_least_one_ref;
            if (p == _p3) { d = _d3; }
            else
            {
                d = (has_at_least_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_at_least_one_ref_delegate));
                if (_p3 == IntPtr.Zero) { _d3 = d; _p3 = p; }
            }
            return d(self);
        }
        
        // GetSubject
        private static IntPtr _p4;
        private static get_subject_delegate _d4;
        
        public static cef_x509cert_principal_t* get_subject(cef_x509certificate_t* self)
        {
            get_subject_delegate d;
            var p = self->_get_subject;
            if (p == _p4) { d = _d4; }
            else
            {
                d = (get_subject_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_subject_delegate));
                if (_p4 == IntPtr.Zero) { _d4 = d; _p4 = p; }
            }
            return d(self);
        }
        
        // GetIssuer
        private static IntPtr _p5;
        private static get_issuer_delegate _d5;
        
        public static cef_x509cert_principal_t* get_issuer(cef_x509certificate_t* self)
        {
            get_issuer_delegate d;
            var p = self->_get_issuer;
            if (p == _p5) { d = _d5; }
            else
            {
                d = (get_issuer_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_issuer_delegate));
                if (_p5 == IntPtr.Zero) { _d5 = d; _p5 = p; }
            }
            return d(self);
        }
        
        // GetSerialNumber
        private static IntPtr _p6;
        private static get_serial_number_delegate _d6;
        
        public static cef_binary_value_t* get_serial_number(cef_x509certificate_t* self)
        {
            get_serial_number_delegate d;
            var p = self->_get_serial_number;
            if (p == _p6) { d = _d6; }
            else
            {
                d = (get_serial_number_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_serial_number_delegate));
                if (_p6 == IntPtr.Zero) { _d6 = d; _p6 = p; }
            }
            return d(self);
        }
        
        // GetValidStart
        private static IntPtr _p7;
        private static get_valid_start_delegate _d7;
        
        public static CefBaseTime get_valid_start(cef_x509certificate_t* self)
        {
            get_valid_start_delegate d;
            var p = self->_get_valid_start;
            if (p == _p7) { d = _d7; }
            else
            {
                d = (get_valid_start_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_valid_start_delegate));
                if (_p7 == IntPtr.Zero) { _d7 = d; _p7 = p; }
            }
            return d(self);
        }
        
        // GetValidExpiry
        private static IntPtr _p8;
        private static get_valid_expiry_delegate _d8;
        
        public static CefBaseTime get_valid_expiry(cef_x509certificate_t* self)
        {
            get_valid_expiry_delegate d;
            var p = self->_get_valid_expiry;
            if (p == _p8) { d = _d8; }
            else
            {
                d = (get_valid_expiry_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_valid_expiry_delegate));
                if (_p8 == IntPtr.Zero) { _d8 = d; _p8 = p; }
            }
            return d(self);
        }
        
        // GetDEREncoded
        private static IntPtr _p9;
        private static get_derencoded_delegate _d9;
        
        public static cef_binary_value_t* get_derencoded(cef_x509certificate_t* self)
        {
            get_derencoded_delegate d;
            var p = self->_get_derencoded;
            if (p == _p9) { d = _d9; }
            else
            {
                d = (get_derencoded_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_derencoded_delegate));
                if (_p9 == IntPtr.Zero) { _d9 = d; _p9 = p; }
            }
            return d(self);
        }
        
        // GetPEMEncoded
        private static IntPtr _pa;
        private static get_pemencoded_delegate _da;
        
        public static cef_binary_value_t* get_pemencoded(cef_x509certificate_t* self)
        {
            get_pemencoded_delegate d;
            var p = self->_get_pemencoded;
            if (p == _pa) { d = _da; }
            else
            {
                d = (get_pemencoded_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_pemencoded_delegate));
                if (_pa == IntPtr.Zero) { _da = d; _pa = p; }
            }
            return d(self);
        }
        
        // GetIssuerChainSize
        private static IntPtr _pb;
        private static get_issuer_chain_size_delegate _db;
        
        public static UIntPtr get_issuer_chain_size(cef_x509certificate_t* self)
        {
            get_issuer_chain_size_delegate d;
            var p = self->_get_issuer_chain_size;
            if (p == _pb) { d = _db; }
            else
            {
                d = (get_issuer_chain_size_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_issuer_chain_size_delegate));
                if (_pb == IntPtr.Zero) { _db = d; _pb = p; }
            }
            return d(self);
        }
        
        // GetDEREncodedIssuerChain
        private static IntPtr _pc;
        private static get_derencoded_issuer_chain_delegate _dc;
        
        public static void get_derencoded_issuer_chain(cef_x509certificate_t* self, UIntPtr* chainCount, cef_binary_value_t** chain)
        {
            get_derencoded_issuer_chain_delegate d;
            var p = self->_get_derencoded_issuer_chain;
            if (p == _pc) { d = _dc; }
            else
            {
                d = (get_derencoded_issuer_chain_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_derencoded_issuer_chain_delegate));
                if (_pc == IntPtr.Zero) { _dc = d; _pc = p; }
            }
            d(self, chainCount, chain);
        }
        
        // GetPEMEncodedIssuerChain
        private static IntPtr _pd;
        private static get_pemencoded_issuer_chain_delegate _dd;
        
        public static void get_pemencoded_issuer_chain(cef_x509certificate_t* self, UIntPtr* chainCount, cef_binary_value_t** chain)
        {
            get_pemencoded_issuer_chain_delegate d;
            var p = self->_get_pemencoded_issuer_chain;
            if (p == _pd) { d = _dd; }
            else
            {
                d = (get_pemencoded_issuer_chain_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_pemencoded_issuer_chain_delegate));
                if (_pd == IntPtr.Zero) { _dd = d; _pd = p; }
            }
            d(self, chainCount, chain);
        }
        
    }
}

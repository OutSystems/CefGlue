//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_browser_host_t
    {
        internal cef_base_ref_counted_t _base;
        internal IntPtr _get_browser;
        internal IntPtr _close_browser;
        internal IntPtr _try_close_browser;
        internal IntPtr _set_focus;
        internal IntPtr _get_window_handle;
        internal IntPtr _get_opener_window_handle;
        internal IntPtr _has_view;
        internal IntPtr _get_client;
        internal IntPtr _get_request_context;
        internal IntPtr _get_zoom_level;
        internal IntPtr _set_zoom_level;
        internal IntPtr _run_file_dialog;
        internal IntPtr _start_download;
        internal IntPtr _download_image;
        internal IntPtr _print;
        internal IntPtr _print_to_pdf;
        internal IntPtr _find;
        internal IntPtr _stop_finding;
        internal IntPtr _show_dev_tools;
        internal IntPtr _close_dev_tools;
        internal IntPtr _has_dev_tools;
        internal IntPtr _send_dev_tools_message;
        internal IntPtr _execute_dev_tools_method;
        internal IntPtr _add_dev_tools_message_observer;
        internal IntPtr _get_navigation_entries;
        internal IntPtr _replace_misspelling;
        internal IntPtr _add_word_to_dictionary;
        internal IntPtr _is_window_rendering_disabled;
        internal IntPtr _was_resized;
        internal IntPtr _was_hidden;
        internal IntPtr _notify_screen_info_changed;
        internal IntPtr _invalidate;
        internal IntPtr _send_external_begin_frame;
        internal IntPtr _send_key_event;
        internal IntPtr _send_mouse_click_event;
        internal IntPtr _send_mouse_move_event;
        internal IntPtr _send_mouse_wheel_event;
        internal IntPtr _send_touch_event;
        internal IntPtr _send_capture_lost_event;
        internal IntPtr _notify_move_or_resize_started;
        internal IntPtr _get_windowless_frame_rate;
        internal IntPtr _set_windowless_frame_rate;
        internal IntPtr _ime_set_composition;
        internal IntPtr _ime_commit_text;
        internal IntPtr _ime_finish_composing_text;
        internal IntPtr _ime_cancel_composition;
        internal IntPtr _drag_target_drag_enter;
        internal IntPtr _drag_target_drag_over;
        internal IntPtr _drag_target_drag_leave;
        internal IntPtr _drag_target_drop;
        internal IntPtr _drag_source_ended_at;
        internal IntPtr _drag_source_system_drag_ended;
        internal IntPtr _get_visible_navigation_entry;
        internal IntPtr _set_accessibility_state;
        internal IntPtr _set_auto_resize_enabled;
        internal IntPtr _get_extension;
        internal IntPtr _is_background_host;
        internal IntPtr _set_audio_muted;
        internal IntPtr _is_audio_muted;
        
        // CreateBrowser
        [DllImport(libcef.DllName, EntryPoint = "cef_browser_host_create_browser", CallingConvention = libcef.CEF_CALL)]
        public static extern int create_browser(cef_window_info_t* windowInfo, cef_client_t* client, cef_string_t* url, cef_browser_settings_t* settings, cef_dictionary_value_t* extra_info, cef_request_context_t* request_context);
        
        // CreateBrowserSync
        [DllImport(libcef.DllName, EntryPoint = "cef_browser_host_create_browser_sync", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_browser_t* create_browser_sync(cef_window_info_t* windowInfo, cef_client_t* client, cef_string_t* url, cef_browser_settings_t* settings, cef_dictionary_value_t* extra_info, cef_request_context_t* request_context);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void add_ref_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int release_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_one_ref_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_at_least_one_ref_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_browser_t* get_browser_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void close_browser_delegate(cef_browser_host_t* self, int force_close);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int try_close_browser_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_focus_delegate(cef_browser_host_t* self, int focus);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate IntPtr get_window_handle_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate IntPtr get_opener_window_handle_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_view_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_client_t* get_client_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_request_context_t* get_request_context_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate double get_zoom_level_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_zoom_level_delegate(cef_browser_host_t* self, double zoomLevel);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void run_file_dialog_delegate(cef_browser_host_t* self, CefFileDialogMode mode, cef_string_t* title, cef_string_t* default_file_path, cef_string_list* accept_filters, cef_run_file_dialog_callback_t* callback);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void start_download_delegate(cef_browser_host_t* self, cef_string_t* url);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void download_image_delegate(cef_browser_host_t* self, cef_string_t* image_url, int is_favicon, uint max_image_size, int bypass_cache, cef_download_image_callback_t* callback);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void print_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void print_to_pdf_delegate(cef_browser_host_t* self, cef_string_t* path, cef_pdf_print_settings_t* settings, cef_pdf_print_callback_t* callback);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void find_delegate(cef_browser_host_t* self, cef_string_t* searchText, int forward, int matchCase, int findNext);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void stop_finding_delegate(cef_browser_host_t* self, int clearSelection);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void show_dev_tools_delegate(cef_browser_host_t* self, cef_window_info_t* windowInfo, cef_client_t* client, cef_browser_settings_t* settings, cef_point_t* inspect_element_at);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void close_dev_tools_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int has_dev_tools_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int send_dev_tools_message_delegate(cef_browser_host_t* self, void* message, UIntPtr message_size);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int execute_dev_tools_method_delegate(cef_browser_host_t* self, int message_id, cef_string_t* method, cef_dictionary_value_t* @params);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_registration_t* add_dev_tools_message_observer_delegate(cef_browser_host_t* self, cef_dev_tools_message_observer_t* observer);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void get_navigation_entries_delegate(cef_browser_host_t* self, cef_navigation_entry_visitor_t* visitor, int current_only);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void replace_misspelling_delegate(cef_browser_host_t* self, cef_string_t* word);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void add_word_to_dictionary_delegate(cef_browser_host_t* self, cef_string_t* word);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_window_rendering_disabled_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void was_resized_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void was_hidden_delegate(cef_browser_host_t* self, int hidden);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void notify_screen_info_changed_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void invalidate_delegate(cef_browser_host_t* self, CefPaintElementType type);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_external_begin_frame_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_key_event_delegate(cef_browser_host_t* self, cef_key_event_t* @event);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_mouse_click_event_delegate(cef_browser_host_t* self, cef_mouse_event_t* @event, CefMouseButtonType type, int mouseUp, int clickCount);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_mouse_move_event_delegate(cef_browser_host_t* self, cef_mouse_event_t* @event, int mouseLeave);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_mouse_wheel_event_delegate(cef_browser_host_t* self, cef_mouse_event_t* @event, int deltaX, int deltaY);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_touch_event_delegate(cef_browser_host_t* self, cef_touch_event_t* @event);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void send_capture_lost_event_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void notify_move_or_resize_started_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_windowless_frame_rate_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_windowless_frame_rate_delegate(cef_browser_host_t* self, int frame_rate);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void ime_set_composition_delegate(cef_browser_host_t* self, cef_string_t* text, UIntPtr underlinesCount, cef_composition_underline_t* underlines, cef_range_t* replacement_range, cef_range_t* selection_range);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void ime_commit_text_delegate(cef_browser_host_t* self, cef_string_t* text, cef_range_t* replacement_range, int relative_cursor_pos);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void ime_finish_composing_text_delegate(cef_browser_host_t* self, int keep_selection);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void ime_cancel_composition_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_target_drag_enter_delegate(cef_browser_host_t* self, cef_drag_data_t* drag_data, cef_mouse_event_t* @event, CefDragOperationsMask allowed_ops);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_target_drag_over_delegate(cef_browser_host_t* self, cef_mouse_event_t* @event, CefDragOperationsMask allowed_ops);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_target_drag_leave_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_target_drop_delegate(cef_browser_host_t* self, cef_mouse_event_t* @event);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_source_ended_at_delegate(cef_browser_host_t* self, int x, int y, CefDragOperationsMask op);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void drag_source_system_drag_ended_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_navigation_entry_t* get_visible_navigation_entry_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_accessibility_state_delegate(cef_browser_host_t* self, CefState accessibility_state);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_auto_resize_enabled_delegate(cef_browser_host_t* self, int enabled, cef_size_t* min_size, cef_size_t* max_size);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_extension_t* get_extension_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_background_host_delegate(cef_browser_host_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate void set_audio_muted_delegate(cef_browser_host_t* self, int mute);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_audio_muted_delegate(cef_browser_host_t* self);
        
        // AddRef
        private static IntPtr _p0;
        private static add_ref_delegate _d0;
        
        public static void add_ref(cef_browser_host_t* self)
        {
            add_ref_delegate d;
            var p = self->_base._add_ref;
            if (p == _p0) { d = _d0; }
            else
            {
                d = (add_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_ref_delegate));
                if (_p0 == IntPtr.Zero) { _d0 = d; _p0 = p; }
            }
            d(self);
        }
        
        // Release
        private static IntPtr _p1;
        private static release_delegate _d1;
        
        public static int release(cef_browser_host_t* self)
        {
            release_delegate d;
            var p = self->_base._release;
            if (p == _p1) { d = _d1; }
            else
            {
                d = (release_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(release_delegate));
                if (_p1 == IntPtr.Zero) { _d1 = d; _p1 = p; }
            }
            return d(self);
        }
        
        // HasOneRef
        private static IntPtr _p2;
        private static has_one_ref_delegate _d2;
        
        public static int has_one_ref(cef_browser_host_t* self)
        {
            has_one_ref_delegate d;
            var p = self->_base._has_one_ref;
            if (p == _p2) { d = _d2; }
            else
            {
                d = (has_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_one_ref_delegate));
                if (_p2 == IntPtr.Zero) { _d2 = d; _p2 = p; }
            }
            return d(self);
        }
        
        // HasAtLeastOneRef
        private static IntPtr _p3;
        private static has_at_least_one_ref_delegate _d3;
        
        public static int has_at_least_one_ref(cef_browser_host_t* self)
        {
            has_at_least_one_ref_delegate d;
            var p = self->_base._has_at_least_one_ref;
            if (p == _p3) { d = _d3; }
            else
            {
                d = (has_at_least_one_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_at_least_one_ref_delegate));
                if (_p3 == IntPtr.Zero) { _d3 = d; _p3 = p; }
            }
            return d(self);
        }
        
        // GetBrowser
        private static IntPtr _p4;
        private static get_browser_delegate _d4;
        
        public static cef_browser_t* get_browser(cef_browser_host_t* self)
        {
            get_browser_delegate d;
            var p = self->_get_browser;
            if (p == _p4) { d = _d4; }
            else
            {
                d = (get_browser_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_browser_delegate));
                if (_p4 == IntPtr.Zero) { _d4 = d; _p4 = p; }
            }
            return d(self);
        }
        
        // CloseBrowser
        private static IntPtr _p5;
        private static close_browser_delegate _d5;
        
        public static void close_browser(cef_browser_host_t* self, int force_close)
        {
            close_browser_delegate d;
            var p = self->_close_browser;
            if (p == _p5) { d = _d5; }
            else
            {
                d = (close_browser_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(close_browser_delegate));
                if (_p5 == IntPtr.Zero) { _d5 = d; _p5 = p; }
            }
            d(self, force_close);
        }
        
        // TryCloseBrowser
        private static IntPtr _p6;
        private static try_close_browser_delegate _d6;
        
        public static int try_close_browser(cef_browser_host_t* self)
        {
            try_close_browser_delegate d;
            var p = self->_try_close_browser;
            if (p == _p6) { d = _d6; }
            else
            {
                d = (try_close_browser_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(try_close_browser_delegate));
                if (_p6 == IntPtr.Zero) { _d6 = d; _p6 = p; }
            }
            return d(self);
        }
        
        // SetFocus
        private static IntPtr _p7;
        private static set_focus_delegate _d7;
        
        public static void set_focus(cef_browser_host_t* self, int focus)
        {
            set_focus_delegate d;
            var p = self->_set_focus;
            if (p == _p7) { d = _d7; }
            else
            {
                d = (set_focus_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_focus_delegate));
                if (_p7 == IntPtr.Zero) { _d7 = d; _p7 = p; }
            }
            d(self, focus);
        }
        
        // GetWindowHandle
        private static IntPtr _p8;
        private static get_window_handle_delegate _d8;
        
        public static IntPtr get_window_handle(cef_browser_host_t* self)
        {
            get_window_handle_delegate d;
            var p = self->_get_window_handle;
            if (p == _p8) { d = _d8; }
            else
            {
                d = (get_window_handle_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_window_handle_delegate));
                if (_p8 == IntPtr.Zero) { _d8 = d; _p8 = p; }
            }
            return d(self);
        }
        
        // GetOpenerWindowHandle
        private static IntPtr _p9;
        private static get_opener_window_handle_delegate _d9;
        
        public static IntPtr get_opener_window_handle(cef_browser_host_t* self)
        {
            get_opener_window_handle_delegate d;
            var p = self->_get_opener_window_handle;
            if (p == _p9) { d = _d9; }
            else
            {
                d = (get_opener_window_handle_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_opener_window_handle_delegate));
                if (_p9 == IntPtr.Zero) { _d9 = d; _p9 = p; }
            }
            return d(self);
        }
        
        // HasView
        private static IntPtr _pa;
        private static has_view_delegate _da;
        
        public static int has_view(cef_browser_host_t* self)
        {
            has_view_delegate d;
            var p = self->_has_view;
            if (p == _pa) { d = _da; }
            else
            {
                d = (has_view_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_view_delegate));
                if (_pa == IntPtr.Zero) { _da = d; _pa = p; }
            }
            return d(self);
        }
        
        // GetClient
        private static IntPtr _pb;
        private static get_client_delegate _db;
        
        public static cef_client_t* get_client(cef_browser_host_t* self)
        {
            get_client_delegate d;
            var p = self->_get_client;
            if (p == _pb) { d = _db; }
            else
            {
                d = (get_client_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_client_delegate));
                if (_pb == IntPtr.Zero) { _db = d; _pb = p; }
            }
            return d(self);
        }
        
        // GetRequestContext
        private static IntPtr _pc;
        private static get_request_context_delegate _dc;
        
        public static cef_request_context_t* get_request_context(cef_browser_host_t* self)
        {
            get_request_context_delegate d;
            var p = self->_get_request_context;
            if (p == _pc) { d = _dc; }
            else
            {
                d = (get_request_context_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_request_context_delegate));
                if (_pc == IntPtr.Zero) { _dc = d; _pc = p; }
            }
            return d(self);
        }
        
        // GetZoomLevel
        private static IntPtr _pd;
        private static get_zoom_level_delegate _dd;
        
        public static double get_zoom_level(cef_browser_host_t* self)
        {
            get_zoom_level_delegate d;
            var p = self->_get_zoom_level;
            if (p == _pd) { d = _dd; }
            else
            {
                d = (get_zoom_level_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_zoom_level_delegate));
                if (_pd == IntPtr.Zero) { _dd = d; _pd = p; }
            }
            return d(self);
        }
        
        // SetZoomLevel
        private static IntPtr _pe;
        private static set_zoom_level_delegate _de;
        
        public static void set_zoom_level(cef_browser_host_t* self, double zoomLevel)
        {
            set_zoom_level_delegate d;
            var p = self->_set_zoom_level;
            if (p == _pe) { d = _de; }
            else
            {
                d = (set_zoom_level_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_zoom_level_delegate));
                if (_pe == IntPtr.Zero) { _de = d; _pe = p; }
            }
            d(self, zoomLevel);
        }
        
        // RunFileDialog
        private static IntPtr _pf;
        private static run_file_dialog_delegate _df;
        
        public static void run_file_dialog(cef_browser_host_t* self, CefFileDialogMode mode, cef_string_t* title, cef_string_t* default_file_path, cef_string_list* accept_filters, cef_run_file_dialog_callback_t* callback)
        {
            run_file_dialog_delegate d;
            var p = self->_run_file_dialog;
            if (p == _pf) { d = _df; }
            else
            {
                d = (run_file_dialog_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(run_file_dialog_delegate));
                if (_pf == IntPtr.Zero) { _df = d; _pf = p; }
            }
            d(self, mode, title, default_file_path, accept_filters, callback);
        }
        
        // StartDownload
        private static IntPtr _p10;
        private static start_download_delegate _d10;
        
        public static void start_download(cef_browser_host_t* self, cef_string_t* url)
        {
            start_download_delegate d;
            var p = self->_start_download;
            if (p == _p10) { d = _d10; }
            else
            {
                d = (start_download_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(start_download_delegate));
                if (_p10 == IntPtr.Zero) { _d10 = d; _p10 = p; }
            }
            d(self, url);
        }
        
        // DownloadImage
        private static IntPtr _p11;
        private static download_image_delegate _d11;
        
        public static void download_image(cef_browser_host_t* self, cef_string_t* image_url, int is_favicon, uint max_image_size, int bypass_cache, cef_download_image_callback_t* callback)
        {
            download_image_delegate d;
            var p = self->_download_image;
            if (p == _p11) { d = _d11; }
            else
            {
                d = (download_image_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(download_image_delegate));
                if (_p11 == IntPtr.Zero) { _d11 = d; _p11 = p; }
            }
            d(self, image_url, is_favicon, max_image_size, bypass_cache, callback);
        }
        
        // Print
        private static IntPtr _p12;
        private static print_delegate _d12;
        
        public static void print(cef_browser_host_t* self)
        {
            print_delegate d;
            var p = self->_print;
            if (p == _p12) { d = _d12; }
            else
            {
                d = (print_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(print_delegate));
                if (_p12 == IntPtr.Zero) { _d12 = d; _p12 = p; }
            }
            d(self);
        }
        
        // PrintToPDF
        private static IntPtr _p13;
        private static print_to_pdf_delegate _d13;
        
        public static void print_to_pdf(cef_browser_host_t* self, cef_string_t* path, cef_pdf_print_settings_t* settings, cef_pdf_print_callback_t* callback)
        {
            print_to_pdf_delegate d;
            var p = self->_print_to_pdf;
            if (p == _p13) { d = _d13; }
            else
            {
                d = (print_to_pdf_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(print_to_pdf_delegate));
                if (_p13 == IntPtr.Zero) { _d13 = d; _p13 = p; }
            }
            d(self, path, settings, callback);
        }
        
        // Find
        private static IntPtr _p14;
        private static find_delegate _d14;
        
        public static void find(cef_browser_host_t* self, cef_string_t* searchText, int forward, int matchCase, int findNext)
        {
            find_delegate d;
            var p = self->_find;
            if (p == _p14) { d = _d14; }
            else
            {
                d = (find_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(find_delegate));
                if (_p14 == IntPtr.Zero) { _d14 = d; _p14 = p; }
            }
            d(self, searchText, forward, matchCase, findNext);
        }
        
        // StopFinding
        private static IntPtr _p15;
        private static stop_finding_delegate _d15;
        
        public static void stop_finding(cef_browser_host_t* self, int clearSelection)
        {
            stop_finding_delegate d;
            var p = self->_stop_finding;
            if (p == _p15) { d = _d15; }
            else
            {
                d = (stop_finding_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(stop_finding_delegate));
                if (_p15 == IntPtr.Zero) { _d15 = d; _p15 = p; }
            }
            d(self, clearSelection);
        }
        
        // ShowDevTools
        private static IntPtr _p16;
        private static show_dev_tools_delegate _d16;
        
        public static void show_dev_tools(cef_browser_host_t* self, cef_window_info_t* windowInfo, cef_client_t* client, cef_browser_settings_t* settings, cef_point_t* inspect_element_at)
        {
            show_dev_tools_delegate d;
            var p = self->_show_dev_tools;
            if (p == _p16) { d = _d16; }
            else
            {
                d = (show_dev_tools_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(show_dev_tools_delegate));
                if (_p16 == IntPtr.Zero) { _d16 = d; _p16 = p; }
            }
            d(self, windowInfo, client, settings, inspect_element_at);
        }
        
        // CloseDevTools
        private static IntPtr _p17;
        private static close_dev_tools_delegate _d17;
        
        public static void close_dev_tools(cef_browser_host_t* self)
        {
            close_dev_tools_delegate d;
            var p = self->_close_dev_tools;
            if (p == _p17) { d = _d17; }
            else
            {
                d = (close_dev_tools_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(close_dev_tools_delegate));
                if (_p17 == IntPtr.Zero) { _d17 = d; _p17 = p; }
            }
            d(self);
        }
        
        // HasDevTools
        private static IntPtr _p18;
        private static has_dev_tools_delegate _d18;
        
        public static int has_dev_tools(cef_browser_host_t* self)
        {
            has_dev_tools_delegate d;
            var p = self->_has_dev_tools;
            if (p == _p18) { d = _d18; }
            else
            {
                d = (has_dev_tools_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(has_dev_tools_delegate));
                if (_p18 == IntPtr.Zero) { _d18 = d; _p18 = p; }
            }
            return d(self);
        }
        
        // SendDevToolsMessage
        private static IntPtr _p19;
        private static send_dev_tools_message_delegate _d19;
        
        public static int send_dev_tools_message(cef_browser_host_t* self, void* message, UIntPtr message_size)
        {
            send_dev_tools_message_delegate d;
            var p = self->_send_dev_tools_message;
            if (p == _p19) { d = _d19; }
            else
            {
                d = (send_dev_tools_message_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_dev_tools_message_delegate));
                if (_p19 == IntPtr.Zero) { _d19 = d; _p19 = p; }
            }
            return d(self, message, message_size);
        }
        
        // ExecuteDevToolsMethod
        private static IntPtr _p1a;
        private static execute_dev_tools_method_delegate _d1a;
        
        public static int execute_dev_tools_method(cef_browser_host_t* self, int message_id, cef_string_t* method, cef_dictionary_value_t* @params)
        {
            execute_dev_tools_method_delegate d;
            var p = self->_execute_dev_tools_method;
            if (p == _p1a) { d = _d1a; }
            else
            {
                d = (execute_dev_tools_method_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(execute_dev_tools_method_delegate));
                if (_p1a == IntPtr.Zero) { _d1a = d; _p1a = p; }
            }
            return d(self, message_id, method, @params);
        }
        
        // AddDevToolsMessageObserver
        private static IntPtr _p1b;
        private static add_dev_tools_message_observer_delegate _d1b;
        
        public static cef_registration_t* add_dev_tools_message_observer(cef_browser_host_t* self, cef_dev_tools_message_observer_t* observer)
        {
            add_dev_tools_message_observer_delegate d;
            var p = self->_add_dev_tools_message_observer;
            if (p == _p1b) { d = _d1b; }
            else
            {
                d = (add_dev_tools_message_observer_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_dev_tools_message_observer_delegate));
                if (_p1b == IntPtr.Zero) { _d1b = d; _p1b = p; }
            }
            return d(self, observer);
        }
        
        // GetNavigationEntries
        private static IntPtr _p1c;
        private static get_navigation_entries_delegate _d1c;
        
        public static void get_navigation_entries(cef_browser_host_t* self, cef_navigation_entry_visitor_t* visitor, int current_only)
        {
            get_navigation_entries_delegate d;
            var p = self->_get_navigation_entries;
            if (p == _p1c) { d = _d1c; }
            else
            {
                d = (get_navigation_entries_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_navigation_entries_delegate));
                if (_p1c == IntPtr.Zero) { _d1c = d; _p1c = p; }
            }
            d(self, visitor, current_only);
        }
        
        // ReplaceMisspelling
        private static IntPtr _p1d;
        private static replace_misspelling_delegate _d1d;
        
        public static void replace_misspelling(cef_browser_host_t* self, cef_string_t* word)
        {
            replace_misspelling_delegate d;
            var p = self->_replace_misspelling;
            if (p == _p1d) { d = _d1d; }
            else
            {
                d = (replace_misspelling_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(replace_misspelling_delegate));
                if (_p1d == IntPtr.Zero) { _d1d = d; _p1d = p; }
            }
            d(self, word);
        }
        
        // AddWordToDictionary
        private static IntPtr _p1e;
        private static add_word_to_dictionary_delegate _d1e;
        
        public static void add_word_to_dictionary(cef_browser_host_t* self, cef_string_t* word)
        {
            add_word_to_dictionary_delegate d;
            var p = self->_add_word_to_dictionary;
            if (p == _p1e) { d = _d1e; }
            else
            {
                d = (add_word_to_dictionary_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_word_to_dictionary_delegate));
                if (_p1e == IntPtr.Zero) { _d1e = d; _p1e = p; }
            }
            d(self, word);
        }
        
        // IsWindowRenderingDisabled
        private static IntPtr _p1f;
        private static is_window_rendering_disabled_delegate _d1f;
        
        public static int is_window_rendering_disabled(cef_browser_host_t* self)
        {
            is_window_rendering_disabled_delegate d;
            var p = self->_is_window_rendering_disabled;
            if (p == _p1f) { d = _d1f; }
            else
            {
                d = (is_window_rendering_disabled_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_window_rendering_disabled_delegate));
                if (_p1f == IntPtr.Zero) { _d1f = d; _p1f = p; }
            }
            return d(self);
        }
        
        // WasResized
        private static IntPtr _p20;
        private static was_resized_delegate _d20;
        
        public static void was_resized(cef_browser_host_t* self)
        {
            was_resized_delegate d;
            var p = self->_was_resized;
            if (p == _p20) { d = _d20; }
            else
            {
                d = (was_resized_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(was_resized_delegate));
                if (_p20 == IntPtr.Zero) { _d20 = d; _p20 = p; }
            }
            d(self);
        }
        
        // WasHidden
        private static IntPtr _p21;
        private static was_hidden_delegate _d21;
        
        public static void was_hidden(cef_browser_host_t* self, int hidden)
        {
            was_hidden_delegate d;
            var p = self->_was_hidden;
            if (p == _p21) { d = _d21; }
            else
            {
                d = (was_hidden_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(was_hidden_delegate));
                if (_p21 == IntPtr.Zero) { _d21 = d; _p21 = p; }
            }
            d(self, hidden);
        }
        
        // NotifyScreenInfoChanged
        private static IntPtr _p22;
        private static notify_screen_info_changed_delegate _d22;
        
        public static void notify_screen_info_changed(cef_browser_host_t* self)
        {
            notify_screen_info_changed_delegate d;
            var p = self->_notify_screen_info_changed;
            if (p == _p22) { d = _d22; }
            else
            {
                d = (notify_screen_info_changed_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(notify_screen_info_changed_delegate));
                if (_p22 == IntPtr.Zero) { _d22 = d; _p22 = p; }
            }
            d(self);
        }
        
        // Invalidate
        private static IntPtr _p23;
        private static invalidate_delegate _d23;
        
        public static void invalidate(cef_browser_host_t* self, CefPaintElementType type)
        {
            invalidate_delegate d;
            var p = self->_invalidate;
            if (p == _p23) { d = _d23; }
            else
            {
                d = (invalidate_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(invalidate_delegate));
                if (_p23 == IntPtr.Zero) { _d23 = d; _p23 = p; }
            }
            d(self, type);
        }
        
        // SendExternalBeginFrame
        private static IntPtr _p24;
        private static send_external_begin_frame_delegate _d24;
        
        public static void send_external_begin_frame(cef_browser_host_t* self)
        {
            send_external_begin_frame_delegate d;
            var p = self->_send_external_begin_frame;
            if (p == _p24) { d = _d24; }
            else
            {
                d = (send_external_begin_frame_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_external_begin_frame_delegate));
                if (_p24 == IntPtr.Zero) { _d24 = d; _p24 = p; }
            }
            d(self);
        }
        
        // SendKeyEvent
        private static IntPtr _p25;
        private static send_key_event_delegate _d25;
        
        public static void send_key_event(cef_browser_host_t* self, cef_key_event_t* @event)
        {
            send_key_event_delegate d;
            var p = self->_send_key_event;
            if (p == _p25) { d = _d25; }
            else
            {
                d = (send_key_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_key_event_delegate));
                if (_p25 == IntPtr.Zero) { _d25 = d; _p25 = p; }
            }
            d(self, @event);
        }
        
        // SendMouseClickEvent
        private static IntPtr _p26;
        private static send_mouse_click_event_delegate _d26;
        
        public static void send_mouse_click_event(cef_browser_host_t* self, cef_mouse_event_t* @event, CefMouseButtonType type, int mouseUp, int clickCount)
        {
            send_mouse_click_event_delegate d;
            var p = self->_send_mouse_click_event;
            if (p == _p26) { d = _d26; }
            else
            {
                d = (send_mouse_click_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_mouse_click_event_delegate));
                if (_p26 == IntPtr.Zero) { _d26 = d; _p26 = p; }
            }
            d(self, @event, type, mouseUp, clickCount);
        }
        
        // SendMouseMoveEvent
        private static IntPtr _p27;
        private static send_mouse_move_event_delegate _d27;
        
        public static void send_mouse_move_event(cef_browser_host_t* self, cef_mouse_event_t* @event, int mouseLeave)
        {
            send_mouse_move_event_delegate d;
            var p = self->_send_mouse_move_event;
            if (p == _p27) { d = _d27; }
            else
            {
                d = (send_mouse_move_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_mouse_move_event_delegate));
                if (_p27 == IntPtr.Zero) { _d27 = d; _p27 = p; }
            }
            d(self, @event, mouseLeave);
        }
        
        // SendMouseWheelEvent
        private static IntPtr _p28;
        private static send_mouse_wheel_event_delegate _d28;
        
        public static void send_mouse_wheel_event(cef_browser_host_t* self, cef_mouse_event_t* @event, int deltaX, int deltaY)
        {
            send_mouse_wheel_event_delegate d;
            var p = self->_send_mouse_wheel_event;
            if (p == _p28) { d = _d28; }
            else
            {
                d = (send_mouse_wheel_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_mouse_wheel_event_delegate));
                if (_p28 == IntPtr.Zero) { _d28 = d; _p28 = p; }
            }
            d(self, @event, deltaX, deltaY);
        }
        
        // SendTouchEvent
        private static IntPtr _p29;
        private static send_touch_event_delegate _d29;
        
        public static void send_touch_event(cef_browser_host_t* self, cef_touch_event_t* @event)
        {
            send_touch_event_delegate d;
            var p = self->_send_touch_event;
            if (p == _p29) { d = _d29; }
            else
            {
                d = (send_touch_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_touch_event_delegate));
                if (_p29 == IntPtr.Zero) { _d29 = d; _p29 = p; }
            }
            d(self, @event);
        }
        
        // SendCaptureLostEvent
        private static IntPtr _p2a;
        private static send_capture_lost_event_delegate _d2a;
        
        public static void send_capture_lost_event(cef_browser_host_t* self)
        {
            send_capture_lost_event_delegate d;
            var p = self->_send_capture_lost_event;
            if (p == _p2a) { d = _d2a; }
            else
            {
                d = (send_capture_lost_event_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(send_capture_lost_event_delegate));
                if (_p2a == IntPtr.Zero) { _d2a = d; _p2a = p; }
            }
            d(self);
        }
        
        // NotifyMoveOrResizeStarted
        private static IntPtr _p2b;
        private static notify_move_or_resize_started_delegate _d2b;
        
        public static void notify_move_or_resize_started(cef_browser_host_t* self)
        {
            notify_move_or_resize_started_delegate d;
            var p = self->_notify_move_or_resize_started;
            if (p == _p2b) { d = _d2b; }
            else
            {
                d = (notify_move_or_resize_started_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(notify_move_or_resize_started_delegate));
                if (_p2b == IntPtr.Zero) { _d2b = d; _p2b = p; }
            }
            d(self);
        }
        
        // GetWindowlessFrameRate
        private static IntPtr _p2c;
        private static get_windowless_frame_rate_delegate _d2c;
        
        public static int get_windowless_frame_rate(cef_browser_host_t* self)
        {
            get_windowless_frame_rate_delegate d;
            var p = self->_get_windowless_frame_rate;
            if (p == _p2c) { d = _d2c; }
            else
            {
                d = (get_windowless_frame_rate_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_windowless_frame_rate_delegate));
                if (_p2c == IntPtr.Zero) { _d2c = d; _p2c = p; }
            }
            return d(self);
        }
        
        // SetWindowlessFrameRate
        private static IntPtr _p2d;
        private static set_windowless_frame_rate_delegate _d2d;
        
        public static void set_windowless_frame_rate(cef_browser_host_t* self, int frame_rate)
        {
            set_windowless_frame_rate_delegate d;
            var p = self->_set_windowless_frame_rate;
            if (p == _p2d) { d = _d2d; }
            else
            {
                d = (set_windowless_frame_rate_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_windowless_frame_rate_delegate));
                if (_p2d == IntPtr.Zero) { _d2d = d; _p2d = p; }
            }
            d(self, frame_rate);
        }
        
        // ImeSetComposition
        private static IntPtr _p2e;
        private static ime_set_composition_delegate _d2e;
        
        public static void ime_set_composition(cef_browser_host_t* self, cef_string_t* text, UIntPtr underlinesCount, cef_composition_underline_t* underlines, cef_range_t* replacement_range, cef_range_t* selection_range)
        {
            ime_set_composition_delegate d;
            var p = self->_ime_set_composition;
            if (p == _p2e) { d = _d2e; }
            else
            {
                d = (ime_set_composition_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(ime_set_composition_delegate));
                if (_p2e == IntPtr.Zero) { _d2e = d; _p2e = p; }
            }
            d(self, text, underlinesCount, underlines, replacement_range, selection_range);
        }
        
        // ImeCommitText
        private static IntPtr _p2f;
        private static ime_commit_text_delegate _d2f;
        
        public static void ime_commit_text(cef_browser_host_t* self, cef_string_t* text, cef_range_t* replacement_range, int relative_cursor_pos)
        {
            ime_commit_text_delegate d;
            var p = self->_ime_commit_text;
            if (p == _p2f) { d = _d2f; }
            else
            {
                d = (ime_commit_text_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(ime_commit_text_delegate));
                if (_p2f == IntPtr.Zero) { _d2f = d; _p2f = p; }
            }
            d(self, text, replacement_range, relative_cursor_pos);
        }
        
        // ImeFinishComposingText
        private static IntPtr _p30;
        private static ime_finish_composing_text_delegate _d30;
        
        public static void ime_finish_composing_text(cef_browser_host_t* self, int keep_selection)
        {
            ime_finish_composing_text_delegate d;
            var p = self->_ime_finish_composing_text;
            if (p == _p30) { d = _d30; }
            else
            {
                d = (ime_finish_composing_text_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(ime_finish_composing_text_delegate));
                if (_p30 == IntPtr.Zero) { _d30 = d; _p30 = p; }
            }
            d(self, keep_selection);
        }
        
        // ImeCancelComposition
        private static IntPtr _p31;
        private static ime_cancel_composition_delegate _d31;
        
        public static void ime_cancel_composition(cef_browser_host_t* self)
        {
            ime_cancel_composition_delegate d;
            var p = self->_ime_cancel_composition;
            if (p == _p31) { d = _d31; }
            else
            {
                d = (ime_cancel_composition_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(ime_cancel_composition_delegate));
                if (_p31 == IntPtr.Zero) { _d31 = d; _p31 = p; }
            }
            d(self);
        }
        
        // DragTargetDragEnter
        private static IntPtr _p32;
        private static drag_target_drag_enter_delegate _d32;
        
        public static void drag_target_drag_enter(cef_browser_host_t* self, cef_drag_data_t* drag_data, cef_mouse_event_t* @event, CefDragOperationsMask allowed_ops)
        {
            drag_target_drag_enter_delegate d;
            var p = self->_drag_target_drag_enter;
            if (p == _p32) { d = _d32; }
            else
            {
                d = (drag_target_drag_enter_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_target_drag_enter_delegate));
                if (_p32 == IntPtr.Zero) { _d32 = d; _p32 = p; }
            }
            d(self, drag_data, @event, allowed_ops);
        }
        
        // DragTargetDragOver
        private static IntPtr _p33;
        private static drag_target_drag_over_delegate _d33;
        
        public static void drag_target_drag_over(cef_browser_host_t* self, cef_mouse_event_t* @event, CefDragOperationsMask allowed_ops)
        {
            drag_target_drag_over_delegate d;
            var p = self->_drag_target_drag_over;
            if (p == _p33) { d = _d33; }
            else
            {
                d = (drag_target_drag_over_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_target_drag_over_delegate));
                if (_p33 == IntPtr.Zero) { _d33 = d; _p33 = p; }
            }
            d(self, @event, allowed_ops);
        }
        
        // DragTargetDragLeave
        private static IntPtr _p34;
        private static drag_target_drag_leave_delegate _d34;
        
        public static void drag_target_drag_leave(cef_browser_host_t* self)
        {
            drag_target_drag_leave_delegate d;
            var p = self->_drag_target_drag_leave;
            if (p == _p34) { d = _d34; }
            else
            {
                d = (drag_target_drag_leave_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_target_drag_leave_delegate));
                if (_p34 == IntPtr.Zero) { _d34 = d; _p34 = p; }
            }
            d(self);
        }
        
        // DragTargetDrop
        private static IntPtr _p35;
        private static drag_target_drop_delegate _d35;
        
        public static void drag_target_drop(cef_browser_host_t* self, cef_mouse_event_t* @event)
        {
            drag_target_drop_delegate d;
            var p = self->_drag_target_drop;
            if (p == _p35) { d = _d35; }
            else
            {
                d = (drag_target_drop_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_target_drop_delegate));
                if (_p35 == IntPtr.Zero) { _d35 = d; _p35 = p; }
            }
            d(self, @event);
        }
        
        // DragSourceEndedAt
        private static IntPtr _p36;
        private static drag_source_ended_at_delegate _d36;
        
        public static void drag_source_ended_at(cef_browser_host_t* self, int x, int y, CefDragOperationsMask op)
        {
            drag_source_ended_at_delegate d;
            var p = self->_drag_source_ended_at;
            if (p == _p36) { d = _d36; }
            else
            {
                d = (drag_source_ended_at_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_source_ended_at_delegate));
                if (_p36 == IntPtr.Zero) { _d36 = d; _p36 = p; }
            }
            d(self, x, y, op);
        }
        
        // DragSourceSystemDragEnded
        private static IntPtr _p37;
        private static drag_source_system_drag_ended_delegate _d37;
        
        public static void drag_source_system_drag_ended(cef_browser_host_t* self)
        {
            drag_source_system_drag_ended_delegate d;
            var p = self->_drag_source_system_drag_ended;
            if (p == _p37) { d = _d37; }
            else
            {
                d = (drag_source_system_drag_ended_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(drag_source_system_drag_ended_delegate));
                if (_p37 == IntPtr.Zero) { _d37 = d; _p37 = p; }
            }
            d(self);
        }
        
        // GetVisibleNavigationEntry
        private static IntPtr _p38;
        private static get_visible_navigation_entry_delegate _d38;
        
        public static cef_navigation_entry_t* get_visible_navigation_entry(cef_browser_host_t* self)
        {
            get_visible_navigation_entry_delegate d;
            var p = self->_get_visible_navigation_entry;
            if (p == _p38) { d = _d38; }
            else
            {
                d = (get_visible_navigation_entry_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_visible_navigation_entry_delegate));
                if (_p38 == IntPtr.Zero) { _d38 = d; _p38 = p; }
            }
            return d(self);
        }
        
        // SetAccessibilityState
        private static IntPtr _p39;
        private static set_accessibility_state_delegate _d39;
        
        public static void set_accessibility_state(cef_browser_host_t* self, CefState accessibility_state)
        {
            set_accessibility_state_delegate d;
            var p = self->_set_accessibility_state;
            if (p == _p39) { d = _d39; }
            else
            {
                d = (set_accessibility_state_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_accessibility_state_delegate));
                if (_p39 == IntPtr.Zero) { _d39 = d; _p39 = p; }
            }
            d(self, accessibility_state);
        }
        
        // SetAutoResizeEnabled
        private static IntPtr _p3a;
        private static set_auto_resize_enabled_delegate _d3a;
        
        public static void set_auto_resize_enabled(cef_browser_host_t* self, int enabled, cef_size_t* min_size, cef_size_t* max_size)
        {
            set_auto_resize_enabled_delegate d;
            var p = self->_set_auto_resize_enabled;
            if (p == _p3a) { d = _d3a; }
            else
            {
                d = (set_auto_resize_enabled_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_auto_resize_enabled_delegate));
                if (_p3a == IntPtr.Zero) { _d3a = d; _p3a = p; }
            }
            d(self, enabled, min_size, max_size);
        }
        
        // GetExtension
        private static IntPtr _p3b;
        private static get_extension_delegate _d3b;
        
        public static cef_extension_t* get_extension(cef_browser_host_t* self)
        {
            get_extension_delegate d;
            var p = self->_get_extension;
            if (p == _p3b) { d = _d3b; }
            else
            {
                d = (get_extension_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_extension_delegate));
                if (_p3b == IntPtr.Zero) { _d3b = d; _p3b = p; }
            }
            return d(self);
        }
        
        // IsBackgroundHost
        private static IntPtr _p3c;
        private static is_background_host_delegate _d3c;
        
        public static int is_background_host(cef_browser_host_t* self)
        {
            is_background_host_delegate d;
            var p = self->_is_background_host;
            if (p == _p3c) { d = _d3c; }
            else
            {
                d = (is_background_host_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_background_host_delegate));
                if (_p3c == IntPtr.Zero) { _d3c = d; _p3c = p; }
            }
            return d(self);
        }
        
        // SetAudioMuted
        private static IntPtr _p3d;
        private static set_audio_muted_delegate _d3d;
        
        public static void set_audio_muted(cef_browser_host_t* self, int mute)
        {
            set_audio_muted_delegate d;
            var p = self->_set_audio_muted;
            if (p == _p3d) { d = _d3d; }
            else
            {
                d = (set_audio_muted_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(set_audio_muted_delegate));
                if (_p3d == IntPtr.Zero) { _d3d = d; _p3d = p; }
            }
            d(self, mute);
        }
        
        // IsAudioMuted
        private static IntPtr _p3e;
        private static is_audio_muted_delegate _d3e;
        
        public static int is_audio_muted(cef_browser_host_t* self)
        {
            is_audio_muted_delegate d;
            var p = self->_is_audio_muted;
            if (p == _p3e) { d = _d3e; }
            else
            {
                d = (is_audio_muted_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_audio_muted_delegate));
                if (_p3e == IntPtr.Zero) { _d3e = d; _p3e = p; }
            }
            return d(self);
        }
        
    }
}
